check_winsz.c:  if (size->ws_row <= tetris->map_height)
check_winsz.c:  else if (size->ws_col <= 25 + tetris->map_width)
create_map.c:  while (i < tetris->map_width + 2)
create_map.c:  while (j < tetris->map_height)
create_map.c:      while (i <= tetris->map_width)
create_map.c:  while (i < tetris->map_height + 1)
create_map.c:      while (x < tetris->map_width + 2)
create_map.c:  map = malloc(sizeof(char *) * tetris->map_height + 3);
create_map.c:  while (i < tetris->map_height + 3)
create_map.c:      map[i] = malloc(tetris->map_width + 3);
create_map.c:  make_tb(map, tetris, tetris->map_height);
debug.c:  if (tetris->map_height < 10 || tetris->map_width < 10)
debug.c:  my_printf("Size : %d*%d\n", tetris->map_height, tetris->map_width);
debug.c:  if (tetris->map_height < 10 || tetris->map_width < 10)
debug.c:  sort_tetrimino(tetrimino, tetris->nb);
fall_tetrimino.c:  tetris->lines = tetris->lines + 1;
fall_tetrimino.c:  tetris->checker = tetris->checker + 1;
fall_tetrimino.c:  tetris->score = tetris->score + 100;
fall_tetrimino.c:      while (j < tetris->map_width + 1)
fall_tetrimino.c:  while (i < tetris->map_height)
fall_tetrimino.c:      while (j < tetris->map_width + 1)
fall_tetrimino.c:      if (count == tetris->map_width)
fall_tetrimino.c:  put_in_map(map, tetrimino, tetris->x, tetris->y);
fall_tetrimino.c:      && collision(map, tetrimino, tetris->x - 1, tetris->y) == 0)
fall_tetrimino.c:    tetris->x--;
fall_tetrimino.c:	   && collision(map, tetrimino, tetris->x + 1, tetris->y) == 0)
fall_tetrimino.c:    tetris->x++;
fall_tetrimino.c:      while ((col = collision(map, tetrimino, tetris->x, tetris->y + 1)) == 0)
fall_tetrimino.c:	tetris->y++;
fall_tetrimino.c:      put_in_map(map, tetrimino, tetris->x, tetris->y);
fall_tetrimino.c:      if ((col = collision(map, &tetrimino[tetris->tet], tetris->x, tetris->y + 1)) == 0)
fall_tetrimino.c:	tetris->y++;
fall_tetrimino.c:      else if (finish_fall(map, &tetrimino[tetris->tet], tetris, col) == 2)
fall_tetrimino.c:      fall_tetrimino2(map, &tetrimino[tetris->tet], keybinds, tetris);
fall_tetrimino.c:	  && collision(map, &tetrimino[tetris->tet], tetris->x, tetris->y) == 0)
fall_tetrimino.c:	tetrimino[tetris->tet] = ini_rotate_tetrimino(tetrimino[tetris->tet], map, tetris->x, tetris->y);
fall_tetrimino.c:      show_in_map(&tetrimino[tetris->tet], tetris->x, tetris->y);
fall_tetrimino.c:      usleep(tetris->sleep);
load_tetriminos.c:  if ((tetrimino = malloc(sizeof(t_tetrimino) * tetris->nb)) == NULL)
load_tetriminos.c:  nb = tetris->nb;
load_tetriminos.c:	tetris->nb--;
load_tetriminos.c:      tetris->nb = i;
loop_game.c:  tetris->next = rand() % tetris->nb;
loop_game.c:      tetris->tet = tetris->next;
loop_game.c:      tetris->next = rand() % tetris->nb;
loop_game.c:      tetris->y = 1;
loop_game.c:      tetris->x = tetris->map_width / 2;
main.c:  tetris->sleep = 130000;
main.c:  tetris->checker = 0;
main.c:  tetris->high_score = 0;
main.c:  tetris->score = 0;
main.c:  tetris->map_width = keybinds->col;
main.c:  tetris->map_height = keybinds->row;
main.c:  while (i < tetris->nb)
main.c:      if (tetrimino[i].width > tetris->map_width || tetrimino[i].height > tetris->map_height)
menu.c:  show_next_in_map(&tetrimino[tetris->next]);
menu.c:  printw("         %d", tetris->high_score);
menu.c:  printw("              %d", tetris->score);
menu.c:  printw("              %d", tetris->lines);
menu.c:  if (tetris->checker == 10)
menu.c:      tetris->sleep = tetris->sleep - 100;
menu.c:      tetris->checker = 0;
